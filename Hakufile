X86_64_TARGET_TRIPLE = 'x86_64-unknown-linux-gnu'
AARCH64_TARGET_TRIPLE = 'aarch64-unknown-linux-gnu'

package_home = `readlink --canonicalize .`
cargo_target_dir = join($package_home, "target")
gst_plugins_so_filename = 'libgst_tflite_plugins.so'

target = $TARGET ? $X86_64_TARGET_TRIPLE
profile = $PROFILE ? 'dev'
is_debug_profile = $profile == 'dev' || $profile == 'test'
if $is_debug_profile:
  build_profile_subdir = 'debug'
elseif $profile == 'release':
  build_profile_subdir = 'release'
else:
  error "Profile not recognized ${PROFILE}"
end

# Ensure that we keep those logs fat
set-env("RUST_BACKTRACE", "full")
if ! ${CARGO_LOG}:
  set-env("CARGO_LOG", "cargo::core::compiler::fingerprint=info")
end

## Builds the images used by Cross to perform cross compilation
build-cross-compiling-docker-images:
  docker build \
      --tag arena-autocam/build-aarch64:latest \
      --build-arg 'CROSS_DEB_ARCH=arm64' \
      --build-arg 'CROSS_BASE_IMAGE=ghcr.io/cross-rs/${AARCH64_TARGET_TRIPLE}:0.2.4' \
      --file docker/Dockerfile.build.${AARCH64_TARGET_TRIPLE} \
      ${package_home}

## Builds the app using the provided `PROFILE` and `TARGET` environment
## variables
build:
  if ${target} == ${AARCH64_TARGET_TRIPLE}:
    # Use cross to build the ARM target in a Docker container.
    build_cmd = "cross"
    compose_file_args = "--file docker/docker-compose.yaml --file docker/docker-compose.aarch64.yaml"
  else
    # If we're X86_64, use regular old Cargo
    build_cmd = "cargo"
    compose_file_args = "--file docker/docker-compose.yaml"
  end

  # Now we should have all the build arifacts sitting in target/{target}/{profile}
  ${build_cmd} -vvv build \
      --workspace --target ${target} \
      --profile ${profile}

  # Create a new set of images from the compose file(s)
  BUILD_PROFILE_SUBDIR=${build_profile_subdir} docker compose \
      ${compose_file_args} build

  # Push the images to our private repo (its address is stored in the
  # .env file)
  BUILD_PROFILE_SUBDIR=${build_profile_subdir} docker compose \
      ${compose_file_args} push

## Sets environment variables needed by the example pipelines
_setup-pipeline-env:
  if !$cargo_target_dir:
    error "CARGO env not set"
  end

  set-env("CARGO_TARGET_PROFILE_DIR", join($cargo_target_dir, $build_profile_subdir))
  set-env("AA_LIB_SUPPORT_DIR", join($CARGO_TARGET_PROFILE_DIR, "lib/support"))
  set-env("AA_LIB_GST_DIR", join($CARGO_TARGET_PROFILE_DIR, "lib/gst"))
  set-env("AA_PATHS_SET", 1)

copy-shared-libraries: setup-pipeline-env
  profile_target_path=$CARGO_TARGET_PROFILE_DIR
  if !$AA_PATHS_SET
    echo "Paths not not set. Please run :setup-pipeline-env"
    exit 1
  end

  mkdir -p $AA_LIB_SUPPORT_DIR $AA_LIB_GST_DIR

  # Copy GST plugins
  cp -f ${profile_target_path}/${gst_plugins_so_filename} ${AA_LIB_GST_DIR}/${gst_plugins_so_filename}

  # Copy TFLite support lib
  libobject_detector_path=`find ${profile_target_path}/build/tflite-support-* \
      -name 'libobject_detector_c.so' -printf "%T+ %p\n" | \
      sort -r | \
      head -n1 | \
      awk '{print $2}'`
  cp -f ${libobject_detector_path} ${AA_LIB_SUPPORT_DIR}/libobject_detector_c.so

setup-gst-env: copy-shared-libraries
  set-env("GST_PLUGIN_PATH", ${AA_LIB_GST_DIR})
  set-env("LD_LIBRARY_PATH", ${AA_LIB_SUPPORT_DIR})
  set-env("RUST_BACKTRACE", "full")

gst_launch_flags = "--gst-debug-level=3 --gst-debug=AA_INFER:5,GST_STATES:3,GST_REFCOUNTING:3,videodecoder:1 -v --eos-on-shutdown"
gst_launch_cmd = "gst-launch-1.0 ${gst_launch_flags}"

video_src = "filesrc location='sample_data/inference-source-1.mp4'"
# video_src = "videotestsrc is-live=true pattern=ball"
infer_caps = "video/x-raw,width=320,height=240,format=RGB"

run-aainfersink-pipeline: setup-gst-env
  ${gst_launch_cmd} \
      ${video_src} ! \
      ${infer_caps} ! \
      rawvideoparse format=rgb ! \
      aainfersink

run-aainferpass-pipeline: setup-gst-env
  ${gst_launch_cmd} \
      ${video_src} ! \
      decodebin ! \
      videoconvert ! \
      videoscale ! \
      ${infer_caps} ! \
      aainferpass ! \
      timeoverlay time-mode=4 font-desc="Sans, 42" halignment=center valignment=top ! \
      videoconvert ! \
      fpsdisplaysink
clean:
  cargo clean
