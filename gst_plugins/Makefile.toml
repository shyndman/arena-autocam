
[tasks.setup-pipeline-env]
script = """
#!@duckscript
profile = get_env CARGO_MAKE_PROFILE
target_path = get_env CARGO_MAKE_CRATE_TARGET_DIRECTORY

if equals ${profile} "development"
    p = join_path ${target_path} "debug"
    set_env CARGO_TARGET_PROFILE_DIR ${p}
    set_env PROFILE "debug"
elseif equals ${profile} "production"
    p = join_path ${target_path} "release"
    set_env CARGO_TARGET_PROFILE_DIR ${p}
    set_env PROFILE "release"
else
    err_msg = concat "Invalid profile for pipeline examples (" ${profile} ")"
    assert_fail ${err_msg}
end

target_profile_path = get_env CARGO_TARGET_PROFILE_DIR
lib_support_path = join_path ${target_profile_path} "lib/support"
set_env AA_LIB_SUPPORT_DIR ${lib_support_path}
lib_gst_path = join_path ${target_profile_path} "lib/gst"
set_env AA_LIB_GST_DIR ${lib_gst_path}

set_env AA_PATHS_SET 1
"""

[tasks.release-build]
condition = { profiles = ["production"] }
args = ["build", "--release"]
extend = "build"

[tasks.build-debug]
condition = { profiles = ["development"] }
args = ["build", "--debug"]
extend = "build"

[tasks.copy-shared-libraries]
dependencies = ["setup-pipeline-env", "build"]
script = """
#!/usr/bin/env bash
set -o xtrace

profile_target_path=$CARGO_TARGET_PROFILE_DIR
if [ -z ${AA_PATHS_SET+x} ]; then
    echo "Paths not not set. Please run :setup-pipeline-env"
    exit 1
fi

mkdir -p $AA_LIB_SUPPORT_DIR $AA_LIB_GST_DIR

# Copy GST plugins
cp -f {$profile_target_path,$AA_LIB_GST_DIR}/libaagstplugins.so

# Copy TFLite support lib
libobject_detector_path=`find target/$PROFILE/build/tflite-support-rs-* -name 'libobject_detector_c.so' -printf "%T+ %p\n" | sort -r | head -n1 | awk '{print $2}'`
cp -f $libobject_detector_path $AA_LIB_SUPPORT_DIR/libobject_detector_path.so
"""

[tasks.setup-example]
dependencies = ["copy-shared-libraries"]
script_runner = "@duckscript"
script = """
aa_lib_gst_dir = get_env AA_LIB_GST_DIR
gst_plugin_path = get_env GST_PLUGIN_PATH
gst_plugin_path = concat ${gst_plugin_path}:${aa_lib_gst_dir}
set_env GST_PLUGIN_PATH ${gst_plugin_path}

aa_lib_support_dir = get_env AA_LIB_SUPPORT_DIR
ld_library_path = get_env LD_LIBRARY_PATH
ld_library_path = concat ${ld_library_path}:${aa_lib_support_dir}
set_env LD_LIBRARY_PATH ${ld_library_path}

print_env
"""

[tasks.run-aainfersink-pipeline]
dependencies = ["setup-example"]
script = """
gst-launch-1.0 --gst-debug-level=4 --gst-debug=GST_STATES:3,GST_REFCOUNTING:3 -v \
    --eos-on-shutdown \
    videotestsrc is-live=true pattern=snow ! \
    video/x-raw,width=320,height=240,format=RGB,framerate=60/1 ! \
    rawvideoparse format=rgb ! \
    aainfersink
"""

[tasks.run-aainferpass-pipeline]
dependencies = ["setup-example"]
script = """
gst-launch-1.0 --gst-debug-level=4 --gst-debug=GST_STATES:3,GST_REFCOUNTING:3 -v \
    --eos-on-shutdown \
    videotestsrc is-live=true pattern=snow ! \
    video/x-raw,width=320,height=240,format=RGB,framerate=60/1 ! \
    rawvideoparse format=rgb ! \
    aainferpass ! \
    videoconvert ! \
    autovideosink
"""

# find target/debug/build/tflite-support-rs-* -name 'libobject_detector_c.so' -printf "%T+ %p\n" | sort -r | head -n1 | awk '{print $


[tasks.env-test]
dependencies = ['setup-pipeline-env']
script = """
echo $CARGO_MAKE_CRATE_TARGET_DIRECTORY
echo $CARGO_MAKE_PROFILE
echo $CARGO_TARGET_PROFILE
"""
